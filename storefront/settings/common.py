"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os  # For redirecting the path of the media directory.

# Needed for changing the settings of access tokens.
from datetime import timedelta

from celery.schedules import crontab  # For use of celery worker schedule.

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.sessions',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'corsheaders',
    'rest_framework',
    'djoser',
    'silk',
    'playground',
    'debug_toolbar',
    'store',
    'tags',
    'likes',
    'core',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # Debug toolbar.
    'django.middleware.security.SecurityMiddleware',
    # Should be placed as high as possible, but after SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]


INTERNAL_IPS = [
    # ...
    '127.0.0.1',
    # ...
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8001',
    'http://127.0.0.1:8001',
]

ROOT_URLCONF = 'storefront.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'storefront.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# User uploaded static files, like CSS styles, logo, html etc. They are served from this endpoint.
STATIC_URL = '/static/'
# The path to which static assets are located on desk, so Django can look for them and use them when in production.
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  #

# Endpoint for at which media and user-uploaded files are exposed.
MEDIA_URL = "/media/"
# Tells Django the path to which the media files are stored in the system.
# "BASE_DIR" is a setting, a variable in this module, that represents the current directory, and append "media" to it.
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Custom defined setting - converts the "unit_price" field into a decimal, from string, when an API request is made.
REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    # Global custom defined setting. Will work for all endpoints if turned on.
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # This is used as the authentication engine for generating JSon web tokens.
    ),
}


# To use this custom defined class over djangos "User" class in the authentication system.
AUTH_USER_MODEL = "core.User"


# Overwritten serializer for when creating new users. Added additional fields to return, when creating a new user.
DJOSER = {
    "SERIALIZERS": {
        # Affected serializer : Route to Custom serializer. Added custom fields when creating users.
        "user_create": "core.serializers.UserCreateSerializer",
        # Added few custom fields to be returned, when users are authenticated via JWT system (/auth/users/me/).
        "current_user": "core.serializers.UserSerializer",
    }
}


# Setting for specifying the prefix to be included in the request header. When sending the authentication token to the server, the
# token will be prefixed with "JWT".
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    # Changing the lifetime of access token for authentication.
    'ACCESS_TOKEN_LIFETIME': timedelta(days=2),
}


CELERY_BEAT_SCHEDULE = {  # Define tasks within dictionary.
    'notify_customers': {
        # Specify task. Full path to the task function.
        'task': 'playground.tasks.notify_customers',
        # Specify schedule. May also be set as "crontab(day_of_week=1, hour=8, minute=45)" Means this task should be executed every monday at 08.45.
        # Values may also be set as "crontab(minute='*/15')", meaning every 15 minutes.
        'schedule': 5,  # Every 5 seconds.
        # If the task function takes any arguments, they may be specified here. May also be as tuple.
        'args': ['Hello world!'],
        # If the task function takes any keyword arguments, they may be specified here.
        'kwargs': {}
    }
}


# For keeping logs on issues, for purpose of troubleshooting issues.
LOGGING = {
    'version': 1,  # Always add.
    'disable_existing_loggers': False,  # Always add.
    'handlers': {  # Determines what should be done with log messages. Write to console, write to a file or something else.
        'console': {  # Defining one handler called "console".
            # Setting class to the logging module of Python, and reference StreamHandler. This class enables writing log messages to the console.
            'class': 'logging.StreamHandler'
        },
        'file': {  # Defining second handler called "file".
            'class': 'logging.FileHandler',  # Writing log messages to a file.
            'filename': 'general.log',  # Setting file name.
            'formatter': 'verbose'  # This uses the verbose formatter defined belows
        }
    },
    'loggers': {  # Defining another key. One or more loggers may be defined inside this dict.
        '': {  # If left empty, this will capture all log messages from all apps. Individual apps may be defined and added, if desired.
            # First specify the handlers. Referencing to the handlers defined above, i.e first logs are to be written on the console and then in the file.
            'handlers': ['console', 'file'],
            # Severity level - DEBUG, INFO, WARNING, ERROR, CRITICAL, critical being the highest.
            # Reading the environment variable, and if it's not set, the default is whatever specified, "INFO" in this case.
            # This variable can be set to capture differenttypes of messages in the production server.
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'ERROR')
        }
    },
    'formatters': {  # This can optionally be specified. This tells how log messages should be formatted.
        # "simple" only shows the message while "verbose" shows more information about the log message.
        'verbose': {  # Search "Python logging logrecord attributes" for all attributes of logrecord class.
            # Datetime, severity, module name of the log message, log message. This may be customized any way desired.
            'format': '{asctime} ({levelname}) - {name} - {message}',
            # Means "str.format()". May also be set to "$" which will use "string.Template" class. May be set to whatever prefered.
            'style': '{'
        }
    }
}
